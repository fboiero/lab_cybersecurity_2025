# Dockerfile SEGURO - Mejores prácticas aplicadas
# UTN FRVM - Laboratorio de Ciberseguridad

# MEJORA 1: Multi-stage build para separar build y runtime
# MEJORA 2: Imagen base minimal y actualizada
FROM python:3.11-slim-bookworm AS builder

# MEJORA 3: Instalar solo dependencias necesarias para build
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# MEJORA 4: Usar directorio específico para dependencias
WORKDIR /build

# MEJORA 5: Copiar solo requirements primero (cache layer optimization)
COPY requirements.txt .

# MEJORA 6: Instalar dependencias en user site-packages
# MEJORA 7: No guardar caché de pip
# MEJORA 8: Verificar checksums con --require-hashes (en producción)
RUN pip install --user --no-cache-dir --upgrade pip && \
    pip install --user --no-cache-dir -r requirements.txt

# ===================================================================
# Stage 2: Runtime minimal
# ===================================================================
FROM python:3.11-slim-bookworm

# MEJORA 9: Metadata de la imagen
LABEL maintainer="UTN FRVM - Laboratorio de Ciberseguridad" \
      description="Aplicación web segura - Laboratorio Docker Security" \
      version="1.0" \
      security.scan="required"

# MEJORA 10: Crear usuario no-root con UID específico
# UID > 10000 para evitar conflictos
RUN groupadd -r -g 10001 appuser && \
    useradd -r -u 10001 -g appuser -m -s /sbin/nologin appuser

# MEJORA 11: Instalar solo runtime dependencies mínimas
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# MEJORA 12: Copiar dependencias desde builder
COPY --from=builder --chown=appuser:appuser /root/.local /home/appuser/.local

# MEJORA 13: Copiar solo archivos necesarios (usar .dockerignore)
WORKDIR /app
COPY --chown=appuser:appuser app.py .

# MEJORA 14: Crear directorio con permisos apropiados
RUN mkdir -p /app/files && \
    chown -R appuser:appuser /app && \
    chmod -R 550 /app && \
    chmod -R 770 /app/files

# MEJORA 15: Configurar PATH para user packages
ENV PATH="/home/appuser/.local/bin:${PATH}" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# MEJORA 16: No exponer puertos innecesarios
EXPOSE 5000

# MEJORA 17: Cambiar a usuario no-root
USER appuser

# MEJORA 18: Healthcheck para monitoreo
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000', timeout=2)" || exit 1

# MEJORA 19: Usar exec form para PID 1 correcto
# MEJORA 20: No correr con shell (evita shell injection en ENTRYPOINT)
ENTRYPOINT ["python"]
CMD ["app.py"]

# MEJORA 21: Documentar que la imagen debe correrse con opciones adicionales
# Ejemplo de ejecución segura:
# docker run -d \
#   --read-only \                          # Filesystem read-only
#   --tmpfs /tmp:rw,noexec,nosuid \        # Temp dir sin ejecución
#   --cap-drop=ALL \                       # Drop all capabilities
#   --cap-add=NET_BIND_SERVICE \           # Solo capability necesaria
#   --security-opt=no-new-privileges \     # Prevenir privilege escalation
#   --security-opt=seccomp=profile.json \  # Seccomp profile
#   --memory=512m \                        # Limit memoria
#   --cpus=0.5 \                           # Limit CPU
#   --pids-limit=100 \                     # Limit procesos
#   -e PORT=5000 \                         # Variables de ambiente
#   secureapp:latest

# COMPARACIÓN DE TAMAÑOS:
# Dockerfile.vulnerable: ~800MB (Ubuntu base + herramientas innecesarias)
# Dockerfile.secure: ~150MB (Slim python + solo runtime deps)
#
# COMPARACIÓN DE VULNERABILIDADES:
# Dockerfile.vulnerable: 50+ CVEs CRITICAL/HIGH
# Dockerfile.secure: 0-2 CVEs LOW (dependiendo de actualizaciones)
#
# MEJORAS APLICADAS: 21
# - Multi-stage build
# - Minimal base image
# - Non-root user con UID específico
# - Layer optimization
# - No secrets en imagen
# - Permisos restrictivos
# - Solo dependencias necesarias
# - Healthcheck
# - Metadata
# - Documentación de ejecución segura
